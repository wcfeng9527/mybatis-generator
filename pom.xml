<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.mybatis.generator</groupId>
	<artifactId>mybatis-generator</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>mybatis-generator</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		
		 <!-- mysql 驱动 -->  
        <dependency>  
            <groupId>mysql</groupId>  
            <artifactId>mysql-connector-java</artifactId>  
        </dependency>  
        <!-- 数据库连接池 -->  
        <dependency>  
            <groupId>com.alibaba</groupId>  
            <artifactId>druid</artifactId>  
            <version>1.0.5</version>  
        </dependency>    
         <dependency> 
          <groupId>org.mybatis.spring.boot</groupId>  
            <artifactId>mybatis-spring-boot-starter</artifactId>  
            <version>1.1.1</version>  
        </dependency>  
        <dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>
		
		<!--在spring Boot工程中，只需要在pom.xml中配置 -->
<!-- 		既可以在启动的时候开启web模块，里面会启动了一个内嵌的tomcat服务器，自动配置的DispathServlet及相关的Spring MVC配置类。 -->
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
<!--              <exclusions> -->
<!-- 			    <exclusion> -->
<!-- 			      <groupId>org.springframework.boot</groupId> -->
<!-- 			      <artifactId>spring-boot-starter-tomcat</artifactId> -->
<!-- 			    </exclusion> -->
<!-- 		  </exclusions> -->
        </dependency>
        
  
		<!--   用于编译jsp的jasper包 -->
		<dependency>  
		    <groupId>org.apache.tomcat.embed</groupId>  
		    <artifactId>tomcat-embed-jasper</artifactId>  
		    <scope>provided</scope>  
		</dependency>  
		  <!-- 添加 JSTL 支持 -->  
		<dependency>  
		    <groupId>javax.servlet</groupId>  
		    <artifactId>jstl</artifactId>  
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.jsoup/jsoup -->
		<dependency>
		    <groupId>org.jsoup</groupId>
		    <artifactId>jsoup</artifactId>
		    <version>1.10.3</version>
		</dependency>
		
	</dependencies>
	
  <repositories>
  	<repository>
  		<id>nex_pub</id>
  		<url>http://10.12.31.112:8081/nexus/content/groups/public/</url>
  	</repository>
  </repositories>

<!-- 	<build>
		<plugins>
  			<plugin>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-maven-plugin</artifactId>
              <configuration>指定该Main Class为全局的唯一入口  
		          <mainClass>com.mybatis.generator.MybatisGeneratorApplication</mainClass>  
		          <layout>ZIP</layout>  
		      </configuration>  
        	  <executions>
                  <execution>
                      <goals>
                          <goal>repackage</goal>可以把依赖的包都打包到生成的Jar包中
                      </goals>
                      
                  </execution>
              </executions>
          </plugin>
          <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
			      <delimiters>
			         <delimiter>${resource.delimiter}</delimiter>
			      </delimiters>
			      <useDefaultDelimiters>true</useDefaultDelimiters> 这是重点
			      <overwrite>true</overwrite>
			   </configuration>
				<executions>
					<execution>
						<id>copy-resources</id>
						在default生命周期的 validate阶段就执行resources插件的copy-resources目标
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						
						<configuration>
							指定resources插件处理资源文件到哪个目录下
							<outputDirectory>target\classes</outputDirectory>
							也可以用下面这样的方式（指定相对url的方式指定outputDirectory） <outputDirectory>target/classes</outputDirectory>
							待处理的资源定义
							<resources>
								<resource>
									指定resources插件处理哪个目录下的资源文件
									<directory>src/main/resources/config/${package.environment}</directory>
									是否对待处理的资源开启过滤模式 (resources插件的copy-resources目标也有资源过滤的功能，这里配置的 这个功能的效果跟<build><resources><resource>下配置的资源过滤是一样的，只不过可能执行的阶段不一样， 
										这里执行的阶段是插件指定的validate阶段，<build><resources><resource>下的配置将是在resources插件的resources目标执行时起作用（在process-resources阶段）)
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
						<inherited></inherited>
					</execution>
				</executions>
			
			</plugin>
  	</plugins>
  </build> -->
<build>
        <plugins>
            <!-- spring dev -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>                
                <configuration><!-- 指定该Main Class为全局的唯一入口 -->  
		          <mainClass>com.mybatis.generator.MybatisGeneratorApplication</mainClass>  
		          <layout>ZIP</layout>  
		        </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <!-- spring热部署 -->
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>springloaded</artifactId>
                        <version>1.2.6.RELEASE</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- 忽略无web.xml警告 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <!-- 打包时将jsp文件拷贝到META-INF目录下 -->
            <resource>
                <!-- 指定resources插件处理哪个目录下的资源文件 -->
                <directory>src/main/webapp</directory>
                <!--注意此次必须要放在此目录下才能被访问到 -->
                <targetPath>META-INF</targetPath>
                <includes>
                    <include>**/**</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/**</include>
                </includes>
                <filtering>false</filtering>
            </resource>

        </resources>
    </build>
</project>
